{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/pages/index.js"],"names":["props","className","count","postClass","node","frontmatter","thumbnail","style","backgroundImage","childImageSharp","fluid","src","to","fields","slug","title","BlogIndex","location","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","postCounter","keywords","description","map","key","query","render"],"mappings":"sLAGe,WAAAA,GAAK,OAClB,6BACEC,UAAS,cAAeD,EAAME,MAAQ,GAAM,GAApB,mBAAf,IACPF,EAAMG,UADC,KAELH,EAAMI,KAAKC,YAAYC,UAAvB,yBACJC,MACEP,EAAMI,KAAKC,YAAYC,WAAa,CAClCE,gBAAgB,OACdR,EAAMI,KAAKC,YAAYC,UAAUG,gBAAgBC,MAAMC,IAD1C,MAMnB,kBAAC,OAAD,CAAMC,GAAIZ,EAAMI,KAAKS,OAAOC,KAAMb,UAAU,kBAC1C,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,mBACXD,EAAMI,KAAKC,YAAYU,OAASf,EAAMI,KAAKS,OAAOC,UCRvDE,G,oBAAY,SAAC,EAAUC,GAAc,IAAtBC,EAAqB,EAArBA,KACbC,EAAYD,EAAKE,KAAKC,aAAaN,MACnCO,EAAQJ,EAAKK,kBAAkBC,MACjCC,EAAc,EAElB,OACE,kBAAC,IAAD,CAAQV,MAAOI,GACb,kBAAC,IAAD,CACEJ,MAAM,YACNW,SAAU,CAAC,OAAD,iCAGXR,EAAKE,KAAKC,aAAaM,aACtB,4BAAQ1B,UAAU,aAChB,wBAAIA,UAAU,mBACXiB,EAAKE,KAAKC,aAAaM,cAI9B,yBAAK1B,UAAU,aACZqB,EAAMM,KAAI,YAAe,IAAZxB,EAAW,EAAXA,KAEZ,OADAqB,IAEE,kBAAC,EAAD,CACEI,IAAKzB,EAAKS,OAAOC,KACjBZ,MAAOuB,EACPrB,KAAMA,EACND,UAAS,gBA0CR,mBAAAH,GAAK,OAClB,kBAAC,cAAD,CACE8B,MAnCY,aAoCZC,OAAQ,SAAAb,GAAI,OACV,kBAAC,EAAD,eAAWD,SAAUjB,EAAMiB,SAAUjB,OAAK,EAACkB,KAAMA,GAAUlB,S","file":"component---src-pages-index-js-1a08f3de9d4c3c27a30f.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default props => (\n  <article\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\n      props.postClass\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${\n          props.node.frontmatter.thumbnail.childImageSharp.fluid.src\n        })`,\n      }\n    }\n  >\n    <Link to={props.node.fields.slug} className=\"post-card-link\">\n      <div className=\"post-card-content\">\n        <h2 className=\"post-card-title\">\n          {props.node.frontmatter.title || props.node.fields.slug}\n        </h2>\n      </div>\n    </Link>\n  </article>\n)\n","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostCard from \"../components/postCard\"\n\n// import \"../utils/global.scss\"\nimport \"../utils/normalize.css\"\nimport \"../utils/css/screen.css\"\n//TODO: switch to staticQuery, get rid of comments, remove unnecessary components, export as draft template\nconst BlogIndex = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  let postCounter = 0\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title=\"All posts\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n      {/* <Bio /> */}\n      {data.site.siteMetadata.description && (\n        <header className=\"page-head\">\n          <h2 className=\"page-head-title\">\n            {data.site.siteMetadata.description}\n          </h2>\n        </header>\n      )}\n      <div className=\"post-feed\">\n        {posts.map(({ node }) => {\n          postCounter++\n          return (\n            <PostCard\n              key={node.fields.slug}\n              count={postCounter}\n              node={node}\n              postClass={`post`}\n            />\n          )\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <BlogIndex location={props.location} props data={data} {...props} />\n    )}\n  />\n)\n"],"sourceRoot":""}